--USER DEFINED FUNCTIONS
/* FUNCTIONS ARE A BLOCK OF CODE WE CAN EXECUTE
THEY MUST RETURN ONE AND ONLY ONE VALUE
CAN HAVE 0+ PARAMETERS
FUNCTIONS CAN CALL OTHER FUNCTIONS
CANNOT CALL STORED PROCEDURES
NO TRANSACTIONS OR DML
                    CREATE OR REPLACE FUNCTION [name]
                    ([parameter list] VarName VarType, )
                    RETURN [VarType] IS
                    BEGIN
                    --logic;
                    RETURN ...;
                    END;
                    /
*/

CREATE OR REPLACE FUNCTION CALC_TAX
(T_ID IN NUMBER,TAX IN NUMBER)
RETURN NUMBER AS
TOTAL_PRICE NUMBER;
BEGIN
SELECT UNITPRICE INTO TOTAL_PRICE
FROM TRACK
WHERE TRACKID=T_ID;
RETURN ROUND((TOTAL_PRICE+(TOTAL_PRICE*TAX)),2);
END;
/
--USE CALC_TAX
SELECT CALC_TAX(603,.08) FROM DUAL;
--WEIRD STUFF
SELECT CALC_TAX(603,.08) FROM TRACK;

--STORED PROCEDURES
/*Do not and cannot return a value.
Support multiple IN, OUT AND IN/OUT PARAMETERS.
Can call another Stored Procedure
Transactions are okay
DML is okay
DDL is NOT okay
*/
 CREATE OR REPLACE PROCEDURE MYSTOPRO
 (NAME IN VARCHAR2)
 AS
 BEGIN
 INSERT INTO SCHOOL VALUES(MYSEQ.NEXTVAL,NAME);
 COMMIT;
 END;
 /
--USE MYSTOPRO
EXECUTE MYSTOPRO('MIT');

CREATE TABLE BEAR(
BEAR_ID NUMBER PRIMARY KEY,
BEAR_TYPE_ID NUMBER,
BEAR_NAME VARCHAR2(100),
BEAR_BIRTHDATE DATE,
BEAR_WEIGHT NUMBER DEFAULT 200,
CAVE_ID NUMBER);

CREATE TABLE BEAR_TYPE(
BEAR_TYPE_ID NUMBER PRIMARY KEY,
BEAR_TYPE_NAME VARCHAR2(100))
;

CREATE TABLE CAVE(
CAVE_ID NUMBER PRIMARY KEY,
CAVE_NAME VARCHAR2(100),
MAX_BEARS NUMBER DEFAULT 4
);

CREATE TABLE BEEHIVE(
BEEHIVE_ID NUMBER PRIMARY KEY,
BEEHIVE_WEIGHT NUMBER DEFAULT 50);

CREATE TABLE BEAR_BEEHIVE(
BEAR_ID NUMBER,
BEEHIVE_ID NUMBER,
PRIMARY KEY (BEAR_ID,BEEHIVE_ID)
);

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY(BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY (BEAR_ID)REFERENCES BEAR(BEAR_ID);

ALTER TABLE BEAR
ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE
CHECK(BEAR_WEIGHT>0);

ALTER TABLE BEEHIVE
ADD CONSTRAINT CK_BEEHIVE_WEIGHT_POSITIVE
CHECK(BEEHIVE_WEIGHT>0);

ALTER TABLE CAVE
ADD CONSTRAINT UQ_CAVE_NAME
UNIQUE(CAVE_NAME);

ALTER TABLE BEAR_TYPE
ADD CONSTRAINT UQ_TYPE_NAME
UNIQUE (BEAR_TYPE_NAME);

CREATE OR REPLACE PROCEDURE BEARPRO
(CAVE_NAME IN VARCHAR2, BEAR_NAME IN VARCHAR2, BEAR_BIRTHDATE IN DATE,BEAR_TYPE IN VARCHAR2)
AS 
BEGIN
INSERT INTO CAVE VALUES(MYSEQ.NEXTVAL, CAVE_NAME,4);
INSERT INTO BEEHIVE VALUES(MYSEQ.NEXTVAL,50);
INSERT INTO BEAR_TYPE VALUES(MYSEQ.NEXTVAL,BEAR_TYPE);
INSERT INTO BEAR VALUES( MYSEQ.NEXTVAL,(MYSEQ.CURRVAL -1),BEAR_NAME,BEAR_BIRTHDATE,2000,(MYSEQ.CURRVAL -3));
COMMIT;
END;
/

EXECUTE BEARPRO('MATTSCAVE','FRED', DATE '2013-05-08','FUZZY');

--CURSOR
--IMPLICIT
SELECT * FROM ARTIST;
--STORED PROCEDURE THAT USES CURSOR
CREATE OR REPLACE PROCEDURE GET_ALL_ALBUMS
(S OUT  SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT ALBUMID,TITLE FROM ALBUM;
END;
/

--EXPLICIT CURSOR
SET SERVEROUT ON;

DECLARE S SYS_REFCURSOR;
ALBUM_ID ALBUM.ALBUMID%TYPE; -- SET ALBUM_ID TO WATEVER DATATYPE ALBUMID IS
ALBUMNAME ALBUM.TITLE%TYPE;
BEGIN
    GET_ALL_ALBUMS(S);
    LOOP
    FETCH S INTO ALBUM_ID,ALBUMNAME;
    EXIT WHEN S%NOTFOUND; --BREAK OUT OF LOOP WHEN NO MORE ROWS ARE AVAILABLE
    DBMS_OUTPUT.PUT_LINE(ALBUM_ID||' IS CURRENT ID, '||ALBUMNAME||' IS CURRENT NAME');
    END LOOP;
    CLOSE S;
    END;
    /

